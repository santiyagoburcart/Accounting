# Generated by Django 5.0.6 on 2025-10-12 16:15

from django.db import migrations
import jdatetime

# یک تابع خالی برای حالت معکوس مایگریشن (کاری انجام نمی‌دهد)
def do_nothing(apps, schema_editor):
    pass

# تابع اصلی برای انتقال داده‌ها
def transfer_customer_data(apps, schema_editor):
    # گرفتن مدل‌های مورد نیاز از تاریخچه مایگریشن‌ها
    OldCustomer = apps.get_model('dashboard', 'Customer')
    CustomerProfile = apps.get_model('dashboard', 'CustomerProfile')
    Subscription = apps.get_model('dashboard', 'Subscription')
    Referrer = apps.get_model('dashboard', 'Referrer')
    BankAccount = apps.get_model('dashboard', 'BankAccount')
    User = apps.get_model('auth', 'User')

    # یک دیکشنری برای نگهداری پروفایل‌های ساخته شده برای جلوگیری از تکرار
    profiles_cache = {}
    referrers_cache = {}
    banks_cache = {}

    print("\nStarting data migration from old Customer model...")

    # حلقه روی تمام رکوردهای مدل قدیمی مشتری
    for old_customer in OldCustomer.objects.all():
        creator = old_customer.creator
        customer_name = old_customer.name
        profile_key = f"{creator.id}-{customer_name}"

        # --- 1. ساخت یا گرفتن CustomerProfile ---
        # اگر پروفایل این مشتری قبلاً ساخته نشده، یکی جدید بساز
        if profile_key not in profiles_cache:
            profile, created = CustomerProfile.objects.get_or_create(
                creator=creator,
                name=customer_name,
                defaults={'phone_number': old_customer.phone_number or ''}
            )
            profiles_cache[profile_key] = profile
        else:
            profile = profiles_cache[profile_key]

        # --- 2. ساخت یا گرفتن Referrer (معرف) ---
        referrer_instance = None
        if old_customer.referrer:
            referrer_key = f"{creator.id}-{old_customer.referrer}"
            if referrer_key not in referrers_cache:
                ref, created = Referrer.objects.get_or_create(
                    creator=creator,
                    name=old_customer.referrer
                )
                referrers_cache[referrer_key] = ref
            referrer_instance = referrers_cache[referrer_key]

        # --- 3. ساخت یا گرفتن BankAccount (حساب بانکی) ---
        bank_instance = None
        if old_customer.bank_name:
            bank_key = f"{creator.id}-{old_customer.bank_name}"
            if bank_key not in banks_cache:
                bank, created = BankAccount.objects.get_or_create(
                    creator=creator,
                    bank_name=old_customer.bank_name
                )
                banks_cache[bank_key] = bank
            bank_instance = banks_cache[bank_key]

        # --- 4. ساخت Subscription (سرویس ماهانه) ---
        # تعیین ماه و سال از روی تاریخ پرداخت
        payment_dt = old_customer.payment_date
        if payment_dt:
            # تبدیل تاریخ میلادی به شمسی برای گرفتن ماه و سال
            jalali_date = jdatetime.date.fromgregorian(date=payment_dt)
            year = jalali_date.year
            month = jalali_date.month

            # ساخت رکورد سرویس جدید
            Subscription.objects.create(
                customer=profile,
                creator=creator,
                year=year,
                month=month,
                price=old_customer.price,
                giga=old_customer.giga,
                status=old_customer.status,
                payment_date=old_customer.payment_date,
                expire_date=old_customer.expire_date,
                referrer=referrer_instance,
                destination_bank=bank_instance,
                created_at=old_customer.created_at # حفظ تاریخ ایجاد قدیمی
            )
        else:
            # اگر تاریخ پرداخت وجود نداشت، یک سرویس پیش‌فرض می‌سازیم
            # (این حالت برای فاکتورهای پرداخت نشده است)
            # شما می‌توانید این منطق را تغییر دهید
            now_jalali = jdatetime.date.today()
            Subscription.objects.get_or_create(
                customer=profile,
                year=now_jalali.year,
                month=now_jalali.month,
                defaults={
                    'creator': creator,
                    'price': old_customer.price,
                    'giga': old_customer.giga,
                    'status': 'pending', # همیشه پرداخت نشده در نظر گرفته می‌شود
                    'expire_date': old_customer.expire_date,
                    'referrer': referrer_instance,
                    'destination_bank': bank_instance,
                    'created_at': old_customer.created_at
                }
            )

    print("Data migration completed successfully!")


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0008_bankaccount_customerprofile_referrer_subscription'), # اینجا باید نام فایل مایگریشن قبلی باشد
    ]

    operations = [
        migrations.RunPython(transfer_customer_data, reverse_code=do_nothing),
    ]